
    1. 跨域方法: JsonP,  iframe,  img,  script,  linck,  WebSocket,   postMessage
        JsonP跨域的原理,用script的src跨域能力向服务端发送一个callback,服务器接收到这个callback然后返回一个方法,
        在这个script标签提前写好这个方法,这个方法会自动运行
        <script>
            function aaa(data){   }//aaa是服务器返回的方法
        </script>
        <script src="http://www.sss.com/index.php?callback=test"></script>//向服务器发送一个参数

        img的妙用,用img测网速,用户进入页面的时候用js创建一个img标签,加载到后端的一个图片,
        根据加载所需要的时间判断网速等级,如果用户网速太慢就切换精简版

        linck引入css的background可以被黑客运用进行攻击

    2. 跨域高阶方法WebSocket,  postMessage(iframe,img)
        偏门方法, 把代码压缩进图片,用img跨域,然后用base64转码
        postMessage(data,origin)  方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。
            data参数,origin请求的地址,在另一个页面给windows绑定一个接收事件,详情https://blog.csdn.net/itpinpai/article/details/84797755

        WebSocket   是一种全双工的网络通讯协议,一般用来做即时聊天,在连接中服务端可以主动往客户端发送信息,http协议服务端无法主动往客户端发送信息

    3. 同源策略: 协议,域名,端口号都一致才能打开页面.  比如A页面设置了cookie,B网页不能打开,除非这两个网页同源
        cookie: 只有创建了这个cookie的网页才可以打开并查看这个cookie,存储大小4KB左右,方法document.cookie = 'xxxx'
        LocalStorage 大小在2.5-5M,永久存储在本地
        SessionStorage 存放在服务端,占用服务端资源,会话级
        IndexDB
        WebSQL

    4. cookie设置同源策略(两种方法)
        test.xxx.com   a.html
        <script>
        document.domain = 'xxx.com';//设置同源策略,前端设置,方法1
        document.cookie = 'name=roy';
        </script>

        test2.xxx.com  b.html(2级域名)
        <script>
        console.log(document.cookie);//name=roy
        </script>

        domain = 'xxx.com';最实用的设置同源策略,在服务端设置,方法2

    5. 多用语义化标签可以优先被爬虫抓取

        